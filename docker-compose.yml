version: '3'

services:
  db:
    image: postgres:14.10
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    env_file:
      - .env
    networks:
      - backend
    volumes:
      - postgres-data:/var/lib/postgresql/data

#  db-admin:
#    restart: always
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#    env_file:
#      - .env
#    depends_on:
#      - db
#    ports:
#      - "8080:80"
#    networks:
#      - backend

  wbapi:
    image: wallbreaker_api:${APP_VERSION}
    build:
      context: .
      dockerfile: Dockerfile-api
    ports:
      - "8002:8002"
    volumes:
      - media:/code/media
      - static:/code/static
    depends_on:
      - db
    # entrypoint: ["./entrypoint.sh","${CLIENT_ID}","${CLIENT_SECRET}"]
    #Use for remote deploy
    # --threads=4 --worker-class=gthread --worker-tmp-dir /dev/shm
    # command: bash -c "conda activate dockerenv && python manage.py collectstatic --no-input && python manage.py makemigrations && python manage.py migrate && python manage.py initadmin && python manage.py gen_groups && python manage.py createapplication --client-id ${CLIENT_ID} --client-secret ${CLIENT_SECRET} --skip-authorization --name WBAPIAuth confidential password && gunicorn --bind 0.0.0.0:8002 wbapi.wsgi:application"
    # command: bash -c "python manage.py collectstatic --no-input && python manage.py migrate && python manage.py initadmin && python manage.py create_groups && python manage.py createapplication --client-id ${CLIENT_ID} --client-secret ${CLIENT_SECRET} --skip-authorization --name DienstplanAuth confidential password && gunicorn --bind 0.0.0.0:8002 DienstplanerAPI.wsgi:application"
    command: bash -c "gunicorn --bind 0.0.0.0:8002 wbapi.wsgi:application"
    # For debugging to make it run forever
    # command: tail -F /dev/null
    restart: always
    networks:
      - backend
      - dienstplanerapi_backend
    env_file:
      - .env
    environment:
#      - APP_ENV=development
# This is for remote deploy
      - APP_ENV=production

networks:
  backend:
    driver: bridge
  dienstplanerapi_backend:
    external: true

volumes:
  postgres-data:
  media:
  static: