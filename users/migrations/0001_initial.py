# Generated by Django 4.2.7 on 2024-03-22 12:49

import datetime
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import users.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Institution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "expires",
                    models.DateTimeField(
                        default=datetime.datetime(
                            2024, 6, 30, 12, 49, 15, 81936, tzinfo=datetime.timezone.utc
                        )
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                ("logo_url", models.URLField(blank=True, null=True)),
                (
                    "codename",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="codename",
                    ),
                ),
                ("data", models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="date of birth"
                    ),
                ),
                (
                    "age_group",
                    models.CharField(
                        choices=[
                            ("AG0", "?"),
                            ("AG1", "<12"),
                            ("AG2", "12-17"),
                            ("AG3", "18-25"),
                            ("AG4", "26-35"),
                            ("AG5", "36-50"),
                            ("AG6", "51-70"),
                            ("AG7", ">70"),
                        ],
                        default="AG0",
                        max_length=3,
                    ),
                ),
                (
                    "sex",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="sex"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        default="dad6a544-4721-4336-92fb-cf184d8de420",
                        max_length=100,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date joined"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("allows_payment_data", models.BooleanField(default=False)),
                (
                    "emailtoken",
                    models.CharField(
                        blank=True, max_length=6, verbose_name="email token"
                    ),
                ),
                ("is_emailvalidated", models.BooleanField(default=False)),
                ("additional_flags", models.JSONField(blank=True, null=True)),
                ("avatar", models.JSONField(blank=True, null=True)),
                (
                    "avatar_img",
                    models.ImageField(
                        blank=True,
                        null=True,
                        storage=users.models.OverwriteStorage,
                        upload_to="avatars/",
                    ),
                ),
                ("geolocation", models.JSONField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "institution_link",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="employee",
                        to="users.institution",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
